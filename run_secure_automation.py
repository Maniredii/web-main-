#!/usr/bin/env python3
"""
üîí Secure LinkedIn Automation Runner
Enhanced version with comprehensive anti-detection measures
"""

import logging
import sys
import time
from linkedin_ollama_automation import LinkedInOllamaAutomation, AutomationStrategy

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('automation_security.log'),
        logging.StreamHandler(sys.stdout)
    ]
)

logger = logging.getLogger(__name__)

def main():
    """Run the enhanced LinkedIn automation with security features"""
    
    print("üîí LinkedIn Automation - Enhanced Security Mode")
    print("=" * 50)
    print("üõ°Ô∏è  Anti-detection features enabled:")
    print("   ‚Ä¢ Stealth browser configuration")
    print("   ‚Ä¢ Human behavior simulation")
    print("   ‚Ä¢ Random delays and timing")
    print("   ‚Ä¢ User agent rotation")
    print("   ‚Ä¢ Security challenge handling")
    print("   ‚Ä¢ 2FA support")
    print("   ‚Ä¢ Human-like typing")
    print("   ‚Ä¢ Mouse movement simulation")
    print("=" * 50)
    
    try:
        # Initialize automation with conservative strategy for maximum safety
        automation = LinkedInOllamaAutomation(
            profile_path="my_details.json",
            strategy=AutomationStrategy.CONSERVATIVE
        )
        
        print("\nüöÄ Starting secure automation...")
        print("‚ö†Ô∏è  Important security notes:")
        print("   ‚Ä¢ Keep your account activity normal")
        print("   ‚Ä¢ Complete any security challenges manually")
        print("   ‚Ä¢ Monitor for any LinkedIn warnings")
        print("   ‚Ä¢ Don't exceed 10-15 applications per day")
        
        # Add a safety delay before starting
        print("\n‚è≥ Adding safety delay before starting...")
        time.sleep(5)
        
        # Run the automation
        automation.run_automation()
        
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è  Automation interrupted by user")
        logger.info("Automation stopped by user")
    except Exception as e:
        print(f"\n‚ùå Automation error: {e}")
        logger.error(f"Automation failed: {e}")
        return False
    
    print("\n‚úÖ Automation completed successfully!")
    return True

if __name__ == "__main__":
    success = main()
    if success:
        print("\nüéØ Check the logs for detailed information:")
        print("   ‚Ä¢ automation_security.log - Detailed logs")
        print("   ‚Ä¢ job_applications_*.json - Application results")
    else:
        print("\n‚ùå Automation failed. Check logs for details.")
        sys.exit(1) 